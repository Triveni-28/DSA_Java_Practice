import java.util.Scanner;

public class Basic_Recursion_problems{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter n:");
        int n = sc.nextInt();

        System.out.println("Printing numbers from n down to 1:");
        printNumbers(n);

        System.out.println("\nSum of numbers from 1 to n:");
        System.out.println(sum(n));

        System.out.println("\nFactorial of n:");
        System.out.println(factorial(n));

        System.out.println("\nFibonacci sequence up to n terms:");
        for (int i = 0; i < n; i++) {
            System.out.print(fibonacci(i) + " ");
        }
        System.out.println();

        System.out.println("\nReverse of number:");
        int reversed = reverseNumber(n, 0);
        System.out.println(reversed);

        System.out.println("\nPower calculation (2^n):");
        System.out.println(power(2, n));

        System.out.println("\nCount digits of n:");
        System.out.println(countDigits(n));
    }

    // Print numbers from n down to 1
    public static void printNumbers(int n) {
        if (n < 1) {
            return;
        }
        System.out.println(n);
        printNumbers(n - 1);
    }

    // Sum of numbers from 1 to n
    public static int sum(int n) {
        if (n == 0) {
            return 0;
        }
        return n + sum(n - 1);
    }

    // Factorial of n
    public static int factorial(int n) {
        if (n == 0 || n == 1) {
            return 1;
        }
        return n * factorial(n - 1);
    }

    // Fibonacci nth term (0-based index)
    public static int fibonacci(int n) {
        if (n == 0) return 0;
        if (n == 1) return 1;
        return fibonacci(n - 1) + fibonacci(n - 2);
    }

    // Reverse a number using recursion
    public static int reverseNumber(int n, int rev) {
        if (n == 0) {
            return rev;
        }
        return reverseNumber(n / 10, rev * 10 + n % 10);
    }

    // Calculate power of base^exp using recursion
    public static int power(int base, int exp) {
        if (exp == 0) {
            return 1;
        }
        return base * power(base, exp - 1);
    }

    // Count digits in a number
    public static int countDigits(int n) {
        if (n == 0) {
            return 0;
        }
        return 1 + countDigits(n / 10);
    }
}
