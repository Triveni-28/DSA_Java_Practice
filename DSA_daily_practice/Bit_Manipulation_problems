public class Bit_Manipulation_problems{
    public static void main(String[] args){
        int[] arr = {1, 2, 2, 3, 3, 3};
        int ans = 0;
        for(int i = 0; i < arr.length; i++) {
            ans = ans ^ arr[i];
        }
        System.out.println("XOR of all elements: " + ans);

        // Example usage of other methods:
        int n = 16;
        System.out.println("Is power of two (" + n + "): " + isPowerOfTwo(n));
        System.out.println("Count set bits (" + n + "): " + countSetBits(n));
        System.out.println("Toggle bit 2 of " + n + ": " + toggleBit(n, 2));
        System.out.println("Set bit 3 of " + n + ": " + setBit(n, 3));
        System.out.println("Clear bit 4 of " + n + ": " + clearBit(n, 4));
        System.out.println("Rightmost set bit of " + n + ": " + rightmostSetBit(n));
        System.out.println("Opposite signs (5, -3): " + oppositeSigns(5, -3));
    }

    // Check if a number is a power of two
    public static boolean isPowerOfTwo(int n) {
        return n > 0 && (n & (n - 1)) == 0;
    }

    // Count set bits in a number
    public static int countSetBits(int n) {
        int count = 0;
        while (n > 0) {
            count += n & 1;
            n >>= 1;
        }
        return count;
    }

    // Toggle ith bit of a number
    public static int toggleBit(int n, int i) {
        return n ^ (1 << i);
    }

    // Set ith bit of a number
    public static int setBit(int n, int i) {
        return n | (1 << i);
    }

    // Clear ith bit of a number
    public static int clearBit(int n, int i) {
        return n & (~(1 << i));
    }

    // Find the rightmost set bit in a number
    public static int rightmostSetBit(int n) {
        return n & (-n);
    }

    // Check if two numbers have opposite signs
    public static boolean oppositeSigns(int x, int y) {
        return (x ^ y) < 0;
    }
}
//find pair with minimum xor
/*import java.util.Arrays;
public class Main {
    public static void findMinXORPair(int[] arr) {
        Arrays.sort(arr); // Step 1: Sort the array
        int minXor = Integer.MAX_VALUE;
        int x = 0, y = 0;

        // Step 2: Find min XOR between adjacent pairs
        for (int i = 0; i < arr.length - 1; i++) {
            int xor = arr[i] ^ arr[i + 1];
            if (xor < minXor) {
                minXor = xor;
                x = arr[i];
                y = arr[i + 1];
            }
        }

        System.out.println("Pair with minimum XOR is: (" + x + ", " + y + ")");
        System.out.println("Minimum XOR value is: " + minXor);
    }

    public static void main(String[] args) {
        int[] arr = {9, 5, 3, 10};
        findMinXORPair(arr);
    }
}*/
//given an array.Find te xor of all te numbers were ith bit is set
/*public class Main{
    public static int xorWithIthBitSet(int[] arr, int i) {
        int result = 0;
        for (int num : arr) {
            // Check if ith bit is set
            if ((num & (1 << i)) != 0) {
                result ^= num;
            }
        }
        return result;
    }

    public static void main(String[] args) {
        int[] arr = {5, 3, 7};
        int i = 1; // 1st bit
        int xor = xorWithIthBitSet(arr, i);
        System.out.println("XOR of numbers with bit " + i + " set: " + xor);
    }
}*/
//given an array,all the numbers appear even number of times,except one
/*public class Main{
    public static int odd(int[] arr){
        int result=0;
        for(int num:arr){
            result^=num;
        }
        return result;
    }
    public static void main(String[] args){
        int[] arr={9,5,5,9,1};
        int oddnum=odd(arr);
        System.out.println(oddnum);
    }
}*/
//given an array,fetch two numbers which are occuring odd number of times
import java.util.*;

/*public class Main{
    public static void findTwoOddNumbers(int[] arr) {
        int xor = 0;
        for (int num : arr) {
            xor ^= num; // Step 1: XOR of all elements = x ^ y
        }

        // Step 2: Get the rightmost set bit in xor
        int rightmostSetBit = xor & -xor;

        int x = 0, y = 0;
        // Step 3: Divide elements into two groups
        for (int num : arr) {
            if ((num & rightmostSetBit) != 0) {
                x ^= num; // Group where the bit is set
            } else {
                y ^= num; // Group where the bit is not set
            }
        }

        // Step 4: x and y are the two odd occurring numbers
        System.out.println("The two odd occurring numbers are: " + x + " and " + y);
    }

    public static void main(String[] args) {
        int[] arr = {4, 2, 4, 5, 2, 3, 3, 1};
        findTwoOddNumbers(arr);
    }
}*/
